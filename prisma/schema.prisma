generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum consultancy_type {
  buyer
  seller
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model consultancies {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String           @db.Uuid
  consultancy_type consultancy_type @default(buyer)
  property_id      String?          @db.Uuid
  observations     String?
  meeting_date     DateTime         @db.Timestamptz(6)
  properties       properties?      @relation(fields: [property_id], references: [id], onUpdate: NoAction)
  user             users            @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

enum notification_type {
  property_approved
  property_rejected
  consultancy_meeting_date_changed
  consultancy_created
}

model notifications {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String            @db.Uuid
  type       notification_type
  data       Json
  is_read    Boolean?          @default(false)
  created_at DateTime?         @default(now()) @db.Timestamptz(6)
  user       users             @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

enum otp_codes_type {
  forgot_password
  register
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model otp_codes {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String         @db.Uuid
  code       String         @db.Char(6)
  expires_at DateTime?      @default(dbgenerated("(CURRENT_TIMESTAMP + '00:30:00'::interval)")) @db.Timestamptz(6)
  type       otp_codes_type @default(register)
  is_used    Boolean?       @default(false)
  created_at DateTime?      @default(now()) @db.Timestamptz(6)
  user       users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

enum property_type {
  house
  apartment
  land
  office
}

enum property_status {
  available
  sold
  deleted
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model properties {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String          @db.Uuid
  title          String          @db.VarChar(255)
  description    String?
  price          BigInt          @db.BigInt
  city           String          @db.VarChar(255)
  neighborhood   String          @db.VarChar(255)
  area           Int             @db.Integer
  bedrooms       Int             @db.SmallInt
  bathrooms      Int             @db.SmallInt
  parking_spaces Int?            @default(0) @db.SmallInt
  property_type  property_type
  status         String?         @default("available") @db.VarChar(20)
  is_deleted     Boolean         @default(false)
  is_sold        Boolean         @default(false)
  is_approved    Boolean         @default(false)
  main_photo     String?         @db.VarChar(400)
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  consultancies  consultancies[]
  user           users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  photos         photos[]
}

enum social_media_providers_name {
  facebook
  google
  twitter
}

model social_media_providers {
  id             Int                         @id @default(autoincrement())
  name           social_media_providers_name @unique
  created_at     DateTime?                   @default(now()) @db.Timestamptz(6)
  user_providers user_providers[]
}

model user_providers {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String                 @unique @db.Uuid
  provider_id            Int
  provider_user_id       String                 @db.VarChar(255)
  created_at             DateTime?              @default(now()) @db.Timestamptz(6)
  social_media_providers social_media_providers @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                   users                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, provider_id, provider_user_id])
}

enum roles {
  admin
  user
  seller
}

model users {
  user_id       String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(100)
  email         String          @db.VarChar(100)
  image         String?         @db.VarChar(400)
  password      String?
  phone         String?         @db.VarChar(20)
  role          roles           @default(user)
  city          String?         @db.VarChar(255)
  neighborhood  String?         @db.VarChar(255)
  is_verified   Boolean?        @default(false)
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  consultancies consultancies[]
  notifications notifications[]
  otp_codes     otp_codes[]
  properties    properties[]

  user_providers           user_providers?
  users_seller_permissions users_seller_permissions[]
}

model photos {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id String     @db.Uuid
  url         String     @db.VarChar(400)
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  properties  properties @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum response {
  accepted
  rejected
  waiting
}

model users_seller_permissions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  response   response  @default(waiting)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  user       users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}
