generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model consultancies {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String      @db.Uuid
  consultancy_type String      @db.VarChar(20)
  property_id      String?     @db.Uuid
  status           String?     @default("pending") @db.VarChar(20)
  request_date     DateTime?   @default(now()) @db.Timestamptz(6)
  meeting_type     String      @db.VarChar(20)
  meeting_date     DateTime    @db.Timestamptz(6)
  properties       properties? @relation(fields: [property_id], references: [id], onUpdate: NoAction)
  users            users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  type       String    @db.VarChar(50)
  data       Json
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model otp_codes {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  code       String    @db.Char(6)
  expires_at DateTime? @default(dbgenerated("(CURRENT_TIMESTAMP + '00:30:00'::interval)")) @db.Timestamptz(6)
  is_used    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model properties {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id       String          @db.Uuid
  title          String          @db.VarChar(255)
  description    String?
  price          Decimal         @db.Decimal(12, 2)
  location       String          @db.VarChar(255)
  area           Decimal         @db.Decimal(10, 2)
  bedrooms       Int             @db.SmallInt
  bathrooms      Int             @db.SmallInt
  parking_spaces Int?            @default(0) @db.SmallInt
  property_type  String          @db.VarChar(50)
  status         String?         @default("available") @db.VarChar(20)
  is_deleted     Boolean?        @default(false)
  is_sold        Boolean?        @default(false)
  is_approved    Boolean?        @default(false)
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  consultancies  consultancies[]
  users          users           @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model social_media_providers {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @unique @db.VarChar(50)
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  user_providers user_providers[]
}

model user_providers {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String                 @db.Uuid
  provider_id            String                 @db.Uuid
  provider_user_id       String                 @db.VarChar(255)
  created_at             DateTime?              @default(now()) @db.Timestamptz(6)
  social_media_providers social_media_providers @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                  users                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, provider_id, provider_user_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @db.VarChar(100)
  email          String           @unique @db.VarChar(100)
  password       String?
  phone          String?          @unique @db.VarChar(20)
  role           String           @default("user") @db.VarChar(10)
  auth_method    String?          @default("email") @db.VarChar(10)
  is_verified    Boolean?         @default(false)
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  consultancies  consultancies[]
  notifications  notifications[]
  otp_codes      otp_codes[]
  properties     properties[]
  user_providers user_providers[]
}
